// SPDX-License-Identifier: MIT
pragma solidity >=0.4.24 <0.9.0;
// @title supply chain in small daily business 
/// @author veeda baha - <veedabaha@gmail.com>
/// Allows the customer to add their project or works in to the network.
/// Projects can be accessed by customers and Engineers .
/// The customers can be shared or add ,get,edit and delete their projects 
/// The engineers can allow to see the record of the project.
/// after the Engineer select a project for doing that set a value or price to that project.
/// The custommer can see the price or value that Engineer add in to the system.
/// The finilly the customer can accepte one of thoes values and payed the ether to engineer.

 import "./InterfaceOfCuntract.sol";

contract SmallDailyBusiness is InterfaceOfCuntract{
    
    //  variables
    address public owner ;
    uint public deal;
    address En =Engineers[msg.sender].engineerAddress;

    //enum
    enum State{
      forSell,
      Finish,
      primsion,
      unprmision
    }
  
    //struct of customers
    
    struct customer{
        address payable customerAddress;
        string Name;
    }
    
    //struct of Engineers
    struct Engineer{
      address payable engineerAddress;
        string Name;
        State state;
       
    }
    
    //struct of projects
   struct Project{
       address owner;
        string Name;
        State state;
        string skills;
        string information;
        uint averageOfprice;
    }

    // struct of offer
    struct offer{
        uint256 price;
        uint256 day;
        string moreInform;
    }
    
    /* 
   * Events
   */
      /// @notice Emitted when a Engineer is registred 
    /// @param _address Engineer address
    event logAddCustomer(address _address);

    /// @notice Emitted when a customer is registred 
    /// @param _address customer address
    event logAddEngineers(address _address);

    /// @notice Emitted when a Project is posted 
    /// @param _customerAddress is the address of Project
    event PostProject(address _customerAddress);

    /// @notice Emitted when Engineer add a price for working on project 
    /// @param  _customerAddress is the address of Project
    /// @param price is the price that customer send to Engineer
    event chooseTheProject(address _customerAddress , uint price);
  
    //mapping
    
    // store the offers of the Engineers with their project id
    mapping( address => offer) public offers;
    
    //store struct of customers in mapping with their addresses
    mapping(address => customer) public customers;
    
    //store struct of Engineers in mapping with their addresses
    mapping (address=> Engineer) public Engineers;
    
     //store struct of projects in mapping with their addresses
    mapping (address => Project) public projects;
    
    /* 
   * Modifiers
   */

    // Create a modifer, isOwner that checks if the msg.sender is the owner of the contract

    modifier verifyCaller (address _address) { 
    require (msg.sender == _address); 
    _;
    }
    
    modifier isOwner () { 
    require (owner == msg.sender,
    "Caller is not owner"); 
    _;
    }
 
    modifier isCustomer(address _address){
        require( customers[_address].customerAddress == _address,
        "this account is not Customer.");
        _;
    }
    
    modifier isEngineer(address _Engineer){
        require(Engineers[_Engineer].engineerAddress== _Engineer,
        "caller isnot Engineer");
        _;
    }

    modifier forSell(address _customerAddress){
       require(projects[_customerAddress].owner != address(0), 
       "The project is not nothing");
       require(projects[_customerAddress].state == State.forSell,
       "the project has already done..");
       _;
    }
    
    modifier Finish(address _customerAddress){
       require(projects[_customerAddress].owner != address(0), 
       "The project is not nothing");
       require(projects[_customerAddress].state == State.Finish,
       "this Project has already been for sell");
       _;
    }
    modifier verifyState(){
        require(Engineers[msg.sender].state == State.primsion,
        "this account already set value");
        _;
    }

    constructor() {
        owner = msg.sender;
        deal=0;
    }
    
    //add customer`s address in to mapping
    //add the parameters of customer in to struct
    
    function addCustomer(address payable customerAddress , string memory yourName) public override returns(bool) {
        //register the customer to add a project 
    } 
    
    
    //add Engineers`s address in to mapping
    //add more details in to Engineer`s struct
    
    function addEngineer(address payable _engineerAddress,string memory _yourName) public override returns(bool){
        //register the engineer to select a project for doing

    }
    
    ///add Project`s id in to mapping
    ///check the state of project should be forSell
    ///check the modifier is customer to call that function 
    ///the customer should call that function
    
    function addProject(string memory Name,string memory skills,string memory information,uint averageOfprice) public override payable verifyCaller(msg.sender) returns(bool){
       //this function able to add a project that the caller should be customer 
    }

    function chooseToWork(address _customerAddress,uint256 day, uint price , string memory information) public override isEngineer(msg.sender) forSell(_customerAddress) verifyState() returns(string memory){

       // this function able to engineer can set the favorte value for the project to doing that     
    }

    function accepteCustomer(address payable _engineerAddress) public payable override isCustomer(msg.sender) forSell(msg.sender) returns(bool) {
      //this function access the customer to accepte the value of the project that engineer add that to the system  
    }

    function EditProject(string memory Name, string memory skills, string memory information,uint averageOfprice) public override verifyCaller(msg.sender) forSell(msg.sender) returns (string memory)   
    { 
      //this function able to edit the project by customer or who add the project or the caller should be customer
       
    }

    // get project parameters
    function getProject(address _customerAddress) public view override verifyCaller(msg.sender) forSell(_customerAddress) returns (string memory Name,string memory skills,string memory information,uint averageOfprice)   
    {
      //this function just return the Project`s details
    }
    

    //can delete the project with the id of project
    function deleteProject(address _customerAddress) public override isCustomer(msg.sender) returns(string memory){

      //this function can delete the address of project or the project that add the customer
    }


    function _passthevalue() public returns(string memory){
      //this function just show the balance of customer after payed the value of the project
    }

    function getBalance() external view returns(uint){
       //this function return balance of the caller;
    }


}